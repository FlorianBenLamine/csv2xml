#!/usr/bin/python
import csv2xml.csv2xml as csv2xml
from urlparse import urljoin
import os
import argparse
import argcomplete

def argument_parser():
    """
    This function create the help command line and manage and filter the
    parameters of this program (default values, choices values)
    """
    parser = argparse.ArgumentParser(
        prog='csv2xml',
        description='Update data xml from a module via csv files.',
        epilog="""
Openerp Developer Comunity Tool
Development by Vauxoo Team (lp:~vauxoo)
Coded by Katherine Zaoral <kathy@vauxoo.com>.
Source code at lp:~vauxoo-private/vauxoo-private/data_init-dev-kty.""",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    # create subparsers
    subparsers = parser.add_subparsers(
        dest='action',
        help='subcommands help')
    update_parser = subparsers.add_parser(
        'update', help='Update a module data xml files.')
    create_parser = subparsers.add_parser(
        'create', help='Create csv files templates.')

    update_parser.add_argument(
        'module-name',
        metavar='MODULE_NAME',
        type=str,
        help='name of the module to be update.')
    update_parser.add_argument(
        'csv-dir',
        metavar='CSV_DIR', 
        type=str,
        help='the folder where your csv and config files are.')

    argcomplete.autocomplete(parser)
    return parser.parse_args()

def confirm_run(args):
    """
    Manual confirmation before runing the script. Very usefull.
    """
    print'\n... Configuration of Parameters Set'
    for (parameter, value) in args.__dict__.iteritems():
        print '%s = %s' % (parameter, value)

    confirm_flag = False
    while confirm_flag not in ['y', 'n']:
        confirm_flag = raw_input(
            'Confirm the run with the above parameters? [y/n]: ')
        if confirm_flag == 'y':
            print 'The script parameters were confirmed by the user'
        elif confirm_flag == 'n':
            print 'The user cancel the operation'
            exit()
        else:
            print 'The entry is not valid, please enter y or n.'
    return True

def fix_args(args):
    args.module_name = args.module_name.replace('/', '')
    full_path = os.getcwd() + '/'
    args.module_full_path = urljoin(full_path, args.module_name)
    args.csv_dir_full_path = urljoin(full_path, args.csv_dir)
    return args

def main():
    args = argument_parser()
    fix_args(args)
    confirm_run(args)

    f = open('../src/__config__.py','r')
    d = eval(f.read())
    f.close()
    print ' --- The script is running, please wait...'
    for i in d.iteritems():
        out_doc, out_data = csv2xml.initializate_xml_out()
        csv_files = i[1]
        csv2xml.genrate_xml_tree(csv_files, out_data, i[0])
        csv2xml.aditional_parser(i[0], out_data)
        csv2xml.write_xml_doc(out_doc, '%s/data/%s.xml' % (args.module_full_path, i[0]) )
    print ' --- The script successfully finish.' 

if __name__ == '__main__':
    main()
